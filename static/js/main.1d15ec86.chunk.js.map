{"version":3,"sources":["webgl/initShaderProgram.ts","webgl/actions.ts","webgl/draw.ts","webgl/setupVertices.ts","Renderer.tsx","Settings.tsx","serviceWorker.ts","shaders/mandelbrot/vertexShader.ts","webgl/store.ts","index.tsx","shaders/mandelbrot/color.ts","shaders/mandelbrot/grey.ts","shaders/mandelbrot/bw.ts"],"names":["initShaderProgram","gl","vertexShaderSource","fragmentShaderSource","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","validateProgram","VALIDATE_STATUS","console","error","getProgramInfoLog","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","xLength","state","Math","abs","boundaries","yLength","centerZoom","direction","manualZoom","window","innerWidth","innerHeight","x","y","zoomFactor","xw","width","yw","height","draw","vertexAttribPointer","FLOAT","Float32Array","BYTES_PER_ELEMENT","enableVertexAttribArray","uniform1f","getUniformLocation","iterations","samplingRate","uniform4fv","drawArrays","TRIANGLE_FAN","setupVertices","useProgram","verticesBufferObject","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","Renderer","store","this","props","canvas","document","getElementById","getState","getContext","alert","listen","setShaderProgram","addEventListener","updateState","resize","viewport","onwheel","event","preventDefault","clientX","offsetLeft","clientY","offsetTop","deltaY","zoom","dragger","mode","previousPosition","startDrag","endDrag","move","position","dx","dy","isDragging","dragging","onmousedown","onmouseup","onmousemove","animateIteration","program","shaders","times","requestAnimationFrame","animateZoom","limit","id","React","Component","Settings","isOpen","body","onkeyup","keyCode","setState","renderer","size","onClose","hasBackdrop","className","style","display","flexDirection","justifyContent","alignItems","padding","fill","min","max","value","onValueChange","marginTop","marginBottom","onChange","current","currentTarget","map","index","key","name","icon","onClick","large","useState","useEffect","Boolean","location","hostname","match","createStore","initialState","offset","listeners","fire","listener","newState","push","App","useRef","Fragment","ref","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1d15ec86.chunk.js","sourcesContent":["function initShaderProgram(\n  gl: WebGLRenderingContext,\n  vertexShaderSource: string,\n  fragmentShaderSource: string\n): WebGLProgram | null {\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n  const fragmentShader = loadShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  );\n  const shaderProgram = gl.createProgram();\n  if (\n    shaderProgram !== null &&\n    vertexShader !== null &&\n    fragmentShader !== null\n  ) {\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n      console.error(\n        \"Error linking the program: \" + gl.getProgramInfoLog(shaderProgram)\n      );\n      return null;\n    }\n\n    gl.validateProgram(shaderProgram);\n    if (!gl.getProgramParameter(shaderProgram, gl.VALIDATE_STATUS)) {\n      console.error(\n        \"Error validating the program: \" + gl.getProgramInfoLog(shaderProgram)\n      );\n      return null;\n    }\n    return shaderProgram;\n  }\n  return null;\n\n  function loadShader(\n    gl: WebGLRenderingContext,\n    type: number,\n    source: string\n  ): WebGLShader | null {\n    const shader = gl.createShader(type);\n    if (shader !== null) {\n      gl.shaderSource(shader, source);\n      gl.compileShader(shader);\n\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error(\n          \"Error compiling the shader: \" + gl.getShaderInfoLog(shader)\n        );\n        gl.deleteShader(shader);\n        return null;\n      }\n      return shader;\n    }\n    return null;\n  }\n}\n\nexport default initShaderProgram;\n","export function xLength(state: any) {\n  return Math.abs(state.boundaries[0] - state.boundaries[1]);\n}\n\nexport function yLength(state: any) {\n  return Math.abs(state.boundaries[2] - state.boundaries[3]);\n}\n\nexport function resize(state: any) {\n  let width = window.innerWidth - state.width;\n  let height = window.innerHeight - state.height;\n\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    boundaries: [\n      state.boundaries[0] - ((width / 2) * xLength(state)) / state.width,\n      state.boundaries[1] + ((width / 2) * xLength(state)) / state.width,\n      state.boundaries[2] - ((height / 2) * yLength(state)) / state.height,\n      state.boundaries[3] + ((height / 2) * yLength(state)) / state.height,\n    ],\n  };\n}\n\nexport function centerZoom(state: any, direction: number) {\n  return manualZoom(\n    state,\n    window.innerWidth / 2,\n    window.innerHeight / 2,\n    direction\n  );\n}\n\nexport function manualZoom(\n  state: any,\n  x: number,\n  y: number,\n  direction: number\n) {\n  const zoomFactor = direction < 0 ? 0.05 : -0.05;\n  const xw = x / state.width;\n  const yw = y / state.height;\n  return {\n    boundaries: [\n      state.boundaries[0] + xw * xLength(state) * zoomFactor,\n      state.boundaries[1] - (1 - xw) * xLength(state) * zoomFactor,\n      state.boundaries[2] + (1 - yw) * yLength(state) * zoomFactor,\n      state.boundaries[3] - yw * yLength(state) * zoomFactor,\n    ],\n  };\n}\n\nexport function zoom(\n  state: any,\n  event: MouseWheelEvent,\n  canvas: HTMLCanvasElement\n) {\n  event.preventDefault();\n\n  if (\n    event.clientX > canvas.offsetLeft &&\n    event.clientX < canvas.offsetLeft + state.width &&\n    event.clientY > canvas.offsetTop &&\n    event.clientY < canvas.offsetTop + state.height\n  ) {\n    return manualZoom(\n      state,\n      event.clientX - canvas.offsetLeft,\n      event.clientY - canvas.offsetTop,\n      event.deltaY\n    );\n  }\n}\n\nexport function dragging() {\n  const DRAGGING = 0;\n  const NO_DRAGGING = 1;\n\n  const dragger = {\n    mode: NO_DRAGGING,\n    previousPosition: [0, 0],\n  };\n\n  function startDrag(event: MouseEvent) {\n    dragger.mode = DRAGGING;\n    dragger.previousPosition = [event.clientX, event.clientY];\n  }\n\n  function endDrag(event: MouseEvent) {\n    dragger.mode = NO_DRAGGING;\n    dragger.previousPosition = [event.clientX, event.clientY];\n  }\n  function move(state: any, event: MouseEvent) {\n    if (dragger.mode === DRAGGING) {\n      const position = [event.clientX, event.clientY];\n\n      const dx =\n        ((dragger.previousPosition[0] - position[0]) * xLength(state)) /\n        state.width;\n      const dy =\n        ((dragger.previousPosition[1] - position[1]) * yLength(state)) /\n        state.height;\n\n      dragger.previousPosition = position;\n      return {\n        boundaries: [\n          state.boundaries[0] + dx,\n          state.boundaries[1] + dx,\n          state.boundaries[2] - dy,\n          state.boundaries[3] - dy,\n        ],\n      };\n    }\n  }\n\n  return {\n    startDrag,\n    endDrag,\n    move,\n    isDragging: () => dragger.mode === DRAGGING,\n  };\n}\n","function draw(gl: WebGLRenderingContext, state: any) {\n  const shaderProgram = state.shaderProgram as WebGLProgram;\n  gl.vertexAttribPointer(\n    0,\n    3,\n    gl.FLOAT,\n    false,\n    3 * Float32Array.BYTES_PER_ELEMENT,\n    0\n  );\n  gl.enableVertexAttribArray(0);\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"iterations\"),\n    state.iterations\n  );\n  gl.uniform1f(\n    gl.getUniformLocation(shaderProgram, \"samplingRate\"),\n    state.samplingRate\n  );\n  gl.uniform1f(gl.getUniformLocation(shaderProgram, \"width\"), state.width);\n  gl.uniform1f(gl.getUniformLocation(shaderProgram, \"height\"), state.height);\n\n  //console.log(uniformLocations.boundaries);\n\n  gl.uniform4fv(\n    gl.getUniformLocation(shaderProgram, \"boundaries\"),\n    state.boundaries\n  );\n  gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);\n}\n\nexport default draw;\n","function setupVertices(gl: WebGLRenderingContext, shaderProgram: WebGLProgram) {\n  gl.useProgram(shaderProgram);\n  const vertices = [\n    -1.0,\n    -1.0,\n    0.0,\n    1.0,\n    -1.0,\n    0.0,\n    1.0,\n    1.0,\n    0.0,\n    -1.0,\n    1.0,\n    0.0,\n  ];\n  const verticesBufferObject = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, verticesBufferObject);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n}\n\nexport default setupVertices;\n","import React from \"react\";\nimport initShaderProgram from \"./webgl/initShaderProgram\";\nimport { zoom, dragging, resize, centerZoom } from \"./webgl/actions\";\nimport draw from \"./webgl/draw\";\nimport setupVertices from \"./webgl/setupVertices\";\n\ntype RendererProps = {\n  store: any;\n};\n\nclass Renderer extends React.Component<RendererProps> {\n  gl: any;\n\n  componentDidMount() {\n    const store = this.props.store;\n\n    const canvas = document.getElementById(\"webgl\") as HTMLCanvasElement;\n    if (canvas !== null) {\n      canvas.width = store.getState().width;\n      canvas.height = store.getState().height;\n      this.gl = canvas.getContext(\"webgl\") as WebGLRenderingContext;\n      if (!this.gl)\n        this.gl = canvas.getContext(\n          \"experimental-webgl\"\n        ) as WebGLRenderingContext;\n      if (!this.gl) alert(\"Your browser does not support WebGL.\");\n\n      store.listen(() => {\n        if (store.getState().shaderProgram !== null) {\n          this.gl.useProgram(store.getState().shaderProgram);\n          draw(this.gl, store.getState());\n        }\n      });\n\n      this.setShaderProgram(0);\n\n      window.addEventListener(\"resize\", () => {\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        store.updateState(resize(store.getState()));\n        this.gl.viewport(0, 0, canvas.width, canvas.height);\n      });\n\n      canvas.onwheel = (event) => {\n        store.updateState(zoom(store.getState(), event, canvas));\n      };\n\n      const dragger = dragging();\n      canvas.onmousedown = (event) => {\n        dragger.startDrag(event);\n      };\n\n      canvas.onmouseup = (event) => {\n        dragger.endDrag(event);\n      };\n\n      canvas.onmousemove = (event) => {\n        if (dragger.isDragging()) {\n          store.updateState(dragger.move(store.getState(), event));\n        }\n      };\n    }\n    this.animateIteration();\n    //this.animateZoom();\n  }\n\n  setShaderProgram(program = 0) {\n    const store = this.props.store;\n    const shaderProgram = initShaderProgram(\n      this.gl,\n      store.getState().shaders[program].vertexShader,\n      store.getState().shaders[program].fragmentShader\n    );\n    if (shaderProgram !== null) {\n      setupVertices(this.gl, shaderProgram);\n      store.updateState({ shaderProgram });\n    }\n  }\n\n  animateZoom(direction = -1, times = 0) {\n    const { store } = this.props;\n    if (times < 50) {\n      store.updateState(centerZoom(store.getState(), direction));\n      requestAnimationFrame(() => this.animateZoom(direction, times + 1));\n    }\n  }\n\n  animateIteration(limit = 100) {\n    const { store } = this.props;\n    const { iterations } = store.getState();\n    if (iterations < limit) {\n      store.updateState({ iterations: iterations + 1 });\n      requestAnimationFrame(() => this.animateIteration(limit));\n    }\n  }\n\n  render() {\n    return <canvas id=\"webgl\"></canvas>;\n  }\n}\n\nexport default Renderer;\n","import React, { useEffect, useState } from \"react\";\nimport { Drawer, NumericInput, Label, Button } from \"@blueprintjs/core\";\nimport { centerZoom } from \"./webgl/actions\";\n\ntype SettingsProps = {\n  store: any;\n  iterations: number;\n  samplingRate: number;\n  renderer: any;\n  shaders: Array<{\n    name: string;\n    vertexShader: WebGLShader;\n    fragmentShader: WebGLShader;\n  }>;\n};\n\nclass Settings extends React.Component<SettingsProps> {\n  state = {\n    isOpen: false,\n  };\n\n  componentDidMount() {\n    document.body.onkeyup = (event) => {\n      if (event.keyCode === 32) {\n        this.setState({ isOpen: !this.state.isOpen });\n      }\n    };\n  }\n\n  render() {\n    const { isOpen } = this.state;\n    const { store, iterations, samplingRate, shaders, renderer } = this.props;\n    return (\n      <Drawer\n        size={220}\n        isOpen={isOpen}\n        onClose={() => this.setState({ isOpen: false })}\n        hasBackdrop={false}\n        className=\"bp3-dark\"\n      >\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"flex-start\",\n            alignItems: \"flex-start\",\n            padding: 20,\n          }}\n        >\n          <Label>\n            <strong>Iterations:</strong>\n            <NumericInput\n              className=\"bp3-dark\"\n              fill={true}\n              min={1}\n              max={10000}\n              value={iterations}\n              onValueChange={(value) => {\n                store.updateState({ iterations: value });\n              }}\n            />\n          </Label>\n          <Label>\n            <strong>Sampling Rate:</strong>\n            <NumericInput\n              className=\"bp3-dark\"\n              fill={true}\n              min={1}\n              max={8}\n              value={samplingRate}\n              onValueChange={(value) => {\n                store.updateState({ samplingRate: value });\n              }}\n            />\n          </Label>\n          <strong>Shader:</strong>\n          <div\n            className=\"bp3-select bp3-fill\"\n            style={{ marginTop: 5, marginBottom: 15 }}\n          >\n            <select\n              onChange={(event) => {\n                renderer.current.setShaderProgram(event.currentTarget.value);\n              }}\n            >\n              {shaders.map((shader, index) => {\n                return (\n                  <option value={index} key={shader.name}>\n                    {shader.name}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n          <strong>Animations:</strong>\n          <div style={{ marginTop: 5, width: \"100%\" }}>\n            <Button\n              style={{ marginBottom: 15 }}\n              icon=\"function\"\n              fill={true}\n              onClick={() => {\n                const limit = iterations;\n                store.updateState({ iterations: 0 });\n                renderer.current.animateIteration(limit);\n              }}\n            >\n              Animate Iteration\n            </Button>\n            <Button\n              style={{ marginBottom: 15 }}\n              icon=\"function\"\n              fill={true}\n              onClick={() => {\n                renderer.current.animateZoom(-1);\n              }}\n            >\n              Animate Zoom In\n            </Button>\n            <Button\n              style={{ marginBottom: 15 }}\n              icon=\"function\"\n              fill={true}\n              onClick={() => {\n                renderer.current.animateZoom(1);\n              }}\n            >\n              Animate Zoom Out\n            </Button>\n          </div>\n          <div\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              justifyContent: \"space-around\",\n              padding: 5,\n              marginBottom: 15,\n            }}\n          >\n            <Button\n              icon=\"zoom-in\"\n              large={true}\n              onClick={() => {\n                store.updateState(centerZoom(store.getState(), -1));\n              }}\n            />\n            <Button\n              icon=\"zoom-out\"\n              large={true}\n              onClick={() => {\n                store.updateState(centerZoom(store.getState(), 1));\n              }}\n            />\n          </div>\n        </div>\n      </Drawer>\n    );\n  }\n}\n\nexport default function (props: any) {\n  const { store } = props;\n  const [state, setState] = useState(store.getState());\n  useEffect(() => {\n    store.listen(() => {\n      setState(store.getState());\n    });\n  });\n  return (\n    <Settings\n      {...props}\n      store={store}\n      iterations={state.iterations}\n      samplingRate={state.samplingRate}\n      shaders={state.shaders}\n    />\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default `\nprecision mediump float;\nattribute vec2 vPosition;\nvoid main(void)\n{\n\tgl_Position = vec4(vPosition, 0.0, 1.0);\n}\n`;\n","import vertexShader from \"../shaders/mandelbrot/vertexShader\";\nimport grey from \"../shaders/mandelbrot/grey\";\nimport bw from \"../shaders/mandelbrot/bw\";\nimport color from \"../shaders/mandelbrot/color\";\n\nfunction createStore(initialState?: any) {\n  let width = window.innerWidth;\n  let height = (400 / 600) * width;\n\n  if (height > window.innerHeight) {\n    width = (600 / 400) * window.innerHeight;\n    height = window.innerHeight;\n  }\n  const offset = [window.innerWidth - width, window.innerHeight - height];\n\n  let state = {\n    iterations: 0,\n    samplingRate: 1,\n    boundaries: [\n      -2 - (offset[0] / 2) * (3 / width),\n      1 + (offset[0] / 2) * (3 / width),\n      -1 - (offset[1] / 2) * (2 / height),\n      1 + (offset[1] / 2) * (2 / height),\n    ],\n    width: window.innerWidth,\n    height: window.innerHeight,\n    shaders: [\n      {\n        name: \"Color\",\n        vertexShader,\n        fragmentShader: color,\n      },\n      {\n        name: \"Grey\",\n        vertexShader,\n        fragmentShader: grey,\n      },\n      {\n        name: \"Black & White\",\n        vertexShader,\n        fragmentShader: bw,\n      },\n    ],\n    shaderProgram: null,\n    ...initialState,\n  };\n\n  const listeners: Array<(state: any) => {}> = [];\n\n  function getState() {\n    return state;\n  }\n\n  function listen(listener: (state: any) => {}) {\n    listeners.push(listener);\n  }\n\n  function fire() {\n    for (let listener of listeners) {\n      listener(state);\n    }\n  }\n\n  function updateState(newState: any) {\n    if (newState) {\n      state = { ...state, ...newState };\n      fire();\n    }\n  }\n\n  return { getState, updateState, listen, fire };\n}\n\nexport default createStore;\n","import React, { useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Renderer from \"./Renderer\";\nimport Settings from \"./Settings\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport createStore from \"./webgl/store\";\nconst store = createStore({\n  /*\n  boundaries: [-2, 1, -1, 1],\n  width: 600,\n  height: 400,\n  */\n});\n\nconst App = () => {\n  const renderer = useRef(null);\n\n  return (\n    <React.Fragment>\n      <Renderer store={store} ref={renderer} />\n      <Settings store={store} renderer={renderer} />\n    </React.Fragment>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default `\nprecision mediump float;\nconst int MAX_ITER = 65535;\nconst int MAX_SAMPLING_RATE = 4096;\nuniform float iterations;\nuniform float samplingRate;\nuniform float width;\nuniform float height;\nuniform vec4 boundaries;\n\nvec2 complexMultiplication(vec2 z1, vec2 z2)\n{\n\treturn vec2(z1.x * z2.x - z1.y * z2.y, z1.x * z2.y + z1.y * z2.x);\n}\n\n// https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat mandelbrot(vec2 c)\n{\n\tvec2 z = vec2(0, 0);\n\tfloat n = 0.0;\n\tfor (int i = 0; i < MAX_ITER; i++) {\n\t\tif (length(z) > 2.0) {\n\t\t\tbreak;\n\t\t}\n\t\tif (n > iterations) {\n\t\t\tbreak;\n\t\t}\n\t\tz = complexMultiplication(z, z) + c;\n\t\tn++;\n\t}\n\treturn float(n);\n}\n\nfloat optimizedMandelbrot(vec2 c)\n{\n\tfloat n = 0.0;\n\tfloat x2 = 0.0;\n\tfloat y2 = 0.0;\n\tfloat x = 0.0;\n\tfloat y = 0.0;\n\tfor (int i = 0; i < MAX_ITER; i++) {\n\t\tif (x2 + y2 > 4.0) {\n\t\t\tbreak;\n\t\t}\n\t\tif (n > iterations) {\n\t\t\tbreak;\n\t\t}\n\n\t\ty = 2.0 * x * y + c.y;\n\t\tx = x2 - y2 + c.x;\n\t\tx2 = x * x;\n\t\ty2 = y * y;\n\n\t\tn++;\n\t}\n\n\treturn float(n);\n}\n\nfloat smoothMandelbrot(vec2 c)\n{\n\tfloat n = 0.0;\n\tfloat x2 = 0.0;\n\tfloat y2 = 0.0;\n\tfloat x = 0.0;\n\tfloat y = 0.0;\n\tfor (int i = 0; i < MAX_ITER; i++) {\n\t\tif (x * x + y * y > pow(2.0, 8.0)) {\n\t\t\tbreak;\n\t\t}\n\t\tif (n > iterations) {\n\t\t\tbreak;\n\t\t}\n\n\t\ty = 2.0 * x * y + c.y;\n\t\tx = x2 - y2 + c.x;\n\t\tx2 = x * x;\n\t\ty2 = y * y;\n\n\t\tn++;\n\t}\n\n\tif (n < iterations) {\n\t\treturn float(n) + 1.0 - log((log(x * x + y * y) / 2.0) / log(2.0)) / log(2.0);\n\t}\n\n\treturn float(n);\n}\n\nfloat sampling (float x, float y) {\n\tvec2 c = vec2(boundaries.x + x * (boundaries.y - boundaries.x) / (width), boundaries.z + y * (boundaries.w - boundaries.z) / (height));\n\treturn smoothMandelbrot(c);\n}\n\nfloat superSampling(float x, float y) {\n\tfloat change = 1.0 / (samplingRate + 1.0);\n\tfloat m = 0.0;\n\tfor (int i = 1; i < MAX_SAMPLING_RATE + 1; i++) {\n\t\tif (float(i) > samplingRate + 1.0) {\n\t\t\tbreak;\n\t\t}\n\t\tm = m + sampling(x + float(i) * change, y + float(i) * change);\n\t}\n\treturn m / samplingRate;\n\n}\n\nvec3 colorRender(float m) {\n\tfloat hue = m / iterations;\n\tfloat saturation = 1.0;\n\tfloat value = m < iterations ? 1.0 : 0.0;\n\treturn hsv2rgb(vec3(hue, saturation, value));\n}\n\nvoid main(void)\n{\n\tfloat x = gl_FragCoord.x - 0.5;\n\tfloat y = gl_FragCoord.y - 0.5;\n\n\tfloat m = superSampling(x, y);\n\n\tgl_FragColor = vec4(colorRender(m), 1.0);\n}\n`;\n","export default `\nprecision mediump float;\nconst int MAX_ITER = 65535;\nconst int MAX_SAMPLING_RATE = 4096;\nuniform float iterations;\nuniform float samplingRate;\nuniform float width;\nuniform float height;\nuniform vec4 boundaries;\n\nvec2 complexMultiplication(vec2 z1, vec2 z2)\n{\n\treturn vec2(z1.x * z2.x - z1.y * z2.y, z1.x * z2.y + z1.y * z2.x);\n}\n\nfloat mandelbrot(vec2 c)\n{\n\tvec2 z = vec2(0, 0);\n\tfloat n = 0.0;\n\tfor (int i = 0; i < MAX_ITER; i++) {\n\t\tif (length(z) > 2.0) {\n\t\t\tbreak;\n\t\t}\n\t\tif (n > iterations) {\n\t\t\tbreak;\n\t\t}\n\t\tz = complexMultiplication(z, z) + c;\n\t\tn++;\n\t}\n\treturn float(n);\n}\n\nfloat optimizedMandelbrot(vec2 c)\n{\n\tfloat n = 0.0;\n\tfloat x2 = 0.0;\n\tfloat y2 = 0.0;\n\tfloat x = 0.0;\n\tfloat y = 0.0;\n\tfor (int i = 0; i < MAX_ITER; i++) {\n\t\tif (x2 + y2 > 4.0) {\n\t\t\tbreak;\n\t\t}\n\t\tif (n > iterations) {\n\t\t\tbreak;\n\t\t}\n\n\t\ty = 2.0 * x * y + c.y;\n\t\tx = x2 - y2 + c.x;\n\t\tx2 = x * x;\n\t\ty2 = y * y;\n\n\t\tn++;\n\t}\n\n\treturn float(n);\n}\n\nfloat smoothMandelbrot(vec2 c)\n{\n\tfloat n = 0.0;\n\tfloat x2 = 0.0;\n\tfloat y2 = 0.0;\n\tfloat x = 0.0;\n\tfloat y = 0.0;\n\tfor (int i = 0; i < MAX_ITER; i++) {\n\t\tif (x * x + y * y > pow(2.0, 8.0)) {\n\t\t\tbreak;\n\t\t}\n\t\tif (n > iterations) {\n\t\t\tbreak;\n\t\t}\n\n\t\ty = 2.0 * x * y + c.y;\n\t\tx = x2 - y2 + c.x;\n\t\tx2 = x * x;\n\t\ty2 = y * y;\n\n\t\tn++;\n\t}\n\n\tif (n < iterations) {\n\t\treturn float(n) + 1.0 - log((log(x * x + y * y) / 2.0) / log(2.0)) / log(2.0);\n\t}\n\n\treturn float(n);\n}\n\nfloat sampling (float x, float y) {\n\tvec2 c = vec2(boundaries.x + x * (boundaries.y - boundaries.x) / (width), boundaries.z + y * (boundaries.w - boundaries.z) / (height));\n\treturn smoothMandelbrot(c);\n}\n\nfloat superSampling(float x, float y) {\n\tfloat change = 1.0 / (samplingRate + 1.0);\n\tfloat m = 0.0;\n\tfor (int i = 1; i < MAX_SAMPLING_RATE + 1; i++) {\n\t\tif (float(i) > samplingRate + 1.0) {\n\t\t\tbreak;\n\t\t}\n\t\tm = m + sampling(x + float(i) * change, y + float(i) * change);\n\t}\n\treturn m / samplingRate;\n\n}\n\nvec3 greyRender(float m) {\n\tfloat color = 1.0 - float(m) / float(iterations);\n\treturn vec3(color, color, color);\n}\n\nvoid main(void)\n{\n\tfloat x = gl_FragCoord.x - 0.5;\n\tfloat y = gl_FragCoord.y - 0.5;\n\n\tfloat m = superSampling(x, y);\n\n\tgl_FragColor = vec4(greyRender(m), 1.0);\n}\n`;\n","export default `\nprecision mediump float;\nconst int MAX_ITER = 65535;\nconst int MAX_SAMPLING_RATE = 4096;\nuniform float iterations;\nuniform float samplingRate;\nuniform float width;\nuniform float height;\nuniform vec4 boundaries;\n\nvec2 complexMultiplication(vec2 z1, vec2 z2)\n{\n\treturn vec2(z1.x * z2.x - z1.y * z2.y, z1.x * z2.y + z1.y * z2.x);\n}\n\nfloat mandelbrot(vec2 c)\n{\n\tvec2 z = vec2(0, 0);\n\tfloat n = 0.0;\n\tfor (int i = 0; i < MAX_ITER; i++) {\n\t\tif (length(z) > 2.0) {\n\t\t\tbreak;\n\t\t}\n\t\tif (n > iterations) {\n\t\t\tbreak;\n\t\t}\n\t\tz = complexMultiplication(z, z) + c;\n\t\tn++;\n\t}\n\treturn float(n);\n}\n\nfloat optimizedMandelbrot(vec2 c)\n{\n\tfloat n = 0.0;\n\tfloat x2 = 0.0;\n\tfloat y2 = 0.0;\n\tfloat x = 0.0;\n\tfloat y = 0.0;\n\tfor (int i = 0; i < MAX_ITER; i++) {\n\t\tif (x2 + y2 > 4.0) {\n\t\t\tbreak;\n\t\t}\n\t\tif (n > iterations) {\n\t\t\tbreak;\n\t\t}\n\n\t\ty = 2.0 * x * y + c.y;\n\t\tx = x2 - y2 + c.x;\n\t\tx2 = x * x;\n\t\ty2 = y * y;\n\n\t\tn++;\n\t}\n\n\treturn float(n);\n}\n\nfloat smoothMandelbrot(vec2 c)\n{\n\tfloat n = 0.0;\n\tfloat x2 = 0.0;\n\tfloat y2 = 0.0;\n\tfloat x = 0.0;\n\tfloat y = 0.0;\n\tfor (int i = 0; i < MAX_ITER; i++) {\n\t\tif (x * x + y * y > pow(2.0, 8.0)) {\n\t\t\tbreak;\n\t\t}\n\t\tif (n > iterations) {\n\t\t\tbreak;\n\t\t}\n\n\t\ty = 2.0 * x * y + c.y;\n\t\tx = x2 - y2 + c.x;\n\t\tx2 = x * x;\n\t\ty2 = y * y;\n\n\t\tn++;\n\t}\n\n\tif (n < iterations) {\n\t\treturn float(n) + 1.0 - log((log(x * x + y * y) / 2.0) / log(2.0)) / log(2.0);\n\t}\n\n\treturn float(n);\n}\n\nfloat sampling (float x, float y) {\n\tvec2 c = vec2(boundaries.x + x * (boundaries.y - boundaries.x) / (width), boundaries.z + y * (boundaries.w - boundaries.z) / (height));\n\treturn smoothMandelbrot(c);\n}\n\nfloat superSampling(float x, float y) {\n\tfloat change = 1.0 / (samplingRate + 1.0);\n\tfloat m = 0.0;\n\tfor (int i = 1; i < MAX_SAMPLING_RATE + 1; i++) {\n\t\tif (float(i) > samplingRate + 1.0) {\n\t\t\tbreak;\n\t\t}\n\t\tm = m + sampling(x + float(i) * change, y + float(i) * change);\n\t}\n\treturn m / samplingRate;\n\n}\n\nvec3 bw(float m) {\n\tint color = 1 - int(m / iterations);\n\treturn vec3(color, color, color);\n}\n\nvoid main(void)\n{\n\tfloat x = gl_FragCoord.x - 0.5;\n\tfloat y = gl_FragCoord.y - 0.5;\n\n\tfloat m = superSampling(x, y);\n\n\tgl_FragColor = vec4(bw(m), 1.0);\n}\n`;\n"],"sourceRoot":""}